{
  "_from": "wait",
  "_id": "wait@0.1.0",
  "_inBundle": false,
  "_integrity": "sha1-jD4cclLVMaE/5ET7a+CVEbDOcWg=",
  "_location": "/wait",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "wait",
    "fetchSpec": "latest",
    "name": "wait",
    "raw": "wait",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/wait/-/wait-0.1.0.tgz",
  "_shasum": "8c3e1c7252d531a13fe444fb6be09511b0ce7168",
  "_spec": "wait",
  "_where": "C:\\Users\\willi\\Desktop\\Checkpoints\\USSF-js-async-checkpoint",
  "author": {
    "name": "Trevor Burnham"
  },
  "bugs": {
    "url": "https://github.com/TrevorBurnham/wait/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Simple utility functions to simplify setTimeout/setInterval",
  "devDependencies": {},
  "directories": {
    "lib": "./lib"
  },
  "email": "trevorburnham@gmail.com",
  "engines": {
    "node": ">= 0.2.0"
  },
  "homepage": "http://github.com/TrevorBurnham/wait",
  "keywords": [
    "CoffeeScript",
    "delay",
    "interval",
    "repeat",
    "time"
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "./lib/wait",
  "name": "wait",
  "optionalDependencies": {},
  "readme": "## Wait\n\n**Wait** is a set of simple wrapper functions for delaying activity in JavaScript and CoffeeScript. (All code examples below are in CoffeeScript, but don't let that deter you if you love your curly braces.)\n\nThis is pure syntactic sugar, so if you're obsessed with performance Ã¼ber alles, move along.\n\n## Examples\n\n    wait 50, ->\n      # This callback will run in 50 milliseconds\n\nThe `wait` function is simple `setTimeout` with the arguments reversed, thus saving die-hard CoffeeScripters from the hell that is parentheses.\n\n    repeat 50, ->\n      # This callback will run every 50 milliseconds\n\nSame as `wait`, but for `setInterval` instead of `setTimeout`.\n\n    doAndRepeat 50, ->\n      # This callback will run immediately, and be run again every 50 ms\n\nPretty self-explanatory.\n\n    waitUntil checkCondition, ->\n      # This callback will run when `checkCondition` returns a true-ish value\n\nThis is as close as you're going to get to `Thread.sleep` in JavaScript. Internally, `waitUntil` uses `setInterval` to check the given condition every 100ms by default; you can provide a different interval as the second argument, e.g.\n\n    waitUntil checkCondition, 50, ->\n      # This callback will run when `checkCondition` returns a true-ish value\n\nNote that the condition isn't checked until after the first interval has elapsed.\n\nOh, and the return value for all of these is the handle returned by `setTimeout` or `setInterval`, so you can use `clearTimeout` or `clearInterval` at your discretion.\n\n## Installation\n\n**Wait** is compatible with Node.js and all major web browsers. For node, use [npm](http://npmjs.org):\n\n    npm install wait\n\nand then `require` the library like so (using the magic of CoffeeScript pattern-matching):\n\n    {wait, repeat, doAndRepeat, waitUntil} = require 'wait'\n\nIf you're in browserland, just add `wait.js` from the `lib` dir to your project.",
  "readmeFilename": "README.mdown",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/TrevorBurnham/wait.git"
  },
  "version": "0.1.0"
}
